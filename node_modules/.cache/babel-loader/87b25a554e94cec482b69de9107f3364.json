{"ast":null,"code":"var _jsxFileName = \"/Users/qaiserabbas/React/githubUsers/src/context/context.js\";\nimport React, { useState, useEffect } from 'react';\nimport mockUser from './mockData.js/mockUser';\nimport mockRepos from './mockData.js/mockRepos';\nimport mockFollowers from './mockData.js/mockFollowers';\nimport axios from 'axios';\nconst rootUrl = 'https://api.github.com';\nconst GithubContext = React.createContext();\n\nconst GithubProvider = ({\n  children\n}) => {\n  const [githubUser, setGithubUser] = useState(mockUser);\n  const [githubRepos, setGithubRepos] = useState(mockRepos);\n  const [githubFollowers, setGithubFollowers] = useState(mockFollowers);\n  const [requests, setRequests] = useState(0);\n  const [isLoading, setIsloading] = useState(false);\n  const [error, setError] = useState({\n    show: false,\n    msg: \"\"\n  });\n\n  const checkRequests = () => {\n    axios(`${rootUrl}/rate_limit`).then(({\n      data\n    }) => {\n      let {\n        rate: {\n          remaining\n        }\n      } = data;\n      setRequests(remaining);\n\n      if (remaining === 0) {\n        toggleError(true, \"sorry, you have exceeded your hourly rate limit!\");\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n\n  function toggleError(show = false, msg = \"\") {\n    setError({\n      show: show,\n      msg: msg\n    });\n  } // const serachGithunUsers = async (user) => {\n  //    const response = await axios(`${rootUrl}/users/${user}`)\n  //    .catch((error)=>{\n  //         console.log(error)\n  //         toggleError(true, \"sorry, there is no user with that username!\")\n  //     })\n  //     if (response){\n  //         setGithubUser(response.data)\n  //     }else{\n  //         toggleError(true, \"sorry, there is no user with that username!\")\n  //     }\n  // }\n\n\n  const serachGithunUsers = async user => {\n    toggleError(false, \"\");\n    setIsloading(true);\n    const response = await axios(`${rootUrl}/users/${user}`).catch(error => {\n      setIsloading(false);\n      toggleError(true, \"sorry, there is no user with that username!\");\n    });\n\n    if (response) {\n      setGithubUser(response.data);\n      const {\n        login,\n        followers_url,\n        repos_url\n      } = response.data;\n      const followers = axios(`${followers_url}?per_page=100`);\n      const repos = axios(`${repos_url}?per_page=100`);\n      await Promise.allSettled([followers, repos]).then(resluts => {\n        const [followers, repos] = resluts;\n\n        if (followers.status === 'fulfilled') {\n          setGithubFollowers(followers.value.data);\n        }\n\n        if (repos.status === 'fulfilled') {\n          setGithubRepos(repos.value.data);\n        }\n\n        setIsloading(false);\n      });\n    } else {\n      setIsloading(false);\n      toggleError(true, \"sorry, there is no user with that username!\");\n    }\n\n    checkRequests(); // })\n  };\n\n  useEffect(() => {\n    checkRequests();\n  }, []);\n  return /*#__PURE__*/React.createElement(GithubContext.Provider, {\n    value: {\n      githubUser: githubUser,\n      githubRepos: githubRepos,\n      githubFollowers: githubFollowers,\n      requests: requests,\n      isLoading: isLoading,\n      error: error,\n      serachGithunUsers: serachGithunUsers\n    }\n  }, children);\n};\n\nexport { GithubProvider, GithubContext };","map":{"version":3,"sources":["/Users/qaiserabbas/React/githubUsers/src/context/context.js"],"names":["React","useState","useEffect","mockUser","mockRepos","mockFollowers","axios","rootUrl","GithubContext","createContext","GithubProvider","children","githubUser","setGithubUser","githubRepos","setGithubRepos","githubFollowers","setGithubFollowers","requests","setRequests","isLoading","setIsloading","error","setError","show","msg","checkRequests","then","data","rate","remaining","toggleError","catch","console","log","serachGithunUsers","user","response","login","followers_url","repos_url","followers","repos","Promise","allSettled","resluts","status","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport mockUser from './mockData.js/mockUser';\nimport mockRepos from './mockData.js/mockRepos';\nimport mockFollowers from './mockData.js/mockFollowers';\nimport axios from 'axios';\n\nconst rootUrl = 'https://api.github.com';\n\nconst GithubContext = React.createContext();\n\nconst GithubProvider = ({children}) =>{\n    const [githubUser, setGithubUser] = useState(mockUser)\n    const [githubRepos, setGithubRepos] = useState(mockRepos)\n    const [githubFollowers, setGithubFollowers] = useState(mockFollowers)\n\n    const [requests, setRequests] = useState(0)\n    const [isLoading, setIsloading] = useState(false)\n\n    const [error, setError] = useState({show:false, msg:\"\"})\n\n    const checkRequests = () =>{\n        axios(`${rootUrl}/rate_limit`).then(({data})=>{\n            let {\n                rate: {remaining},\n            } = data\n            setRequests(remaining)\n            if (remaining === 0 ){\n                toggleError(true, \"sorry, you have exceeded your hourly rate limit!\")\n            }\n        }).catch((error)=>{\n            console.log(error)\n        })\n    }\n    function toggleError(show = false,msg = \"\"){\n        setError({show:show, msg:msg})\n    }\n\n    // const serachGithunUsers = async (user) => {\n    //    const response = await axios(`${rootUrl}/users/${user}`)\n    //    .catch((error)=>{\n    //         console.log(error)\n    //         toggleError(true, \"sorry, there is no user with that username!\")\n    //     })\n    //     if (response){\n    //         setGithubUser(response.data)\n    //     }else{\n    //         toggleError(true, \"sorry, there is no user with that username!\")\n    //     }\n    // }\n    const serachGithunUsers = async (user) => {\n        toggleError(false, \"\")\n        setIsloading(true)\n        const response = await axios(`${rootUrl}/users/${user}`)\n        .catch((error)=>{\n            setIsloading(false)\n            toggleError(true, \"sorry, there is no user with that username!\")\n         })\n            if (response){\n                setGithubUser(response.data)\n                const {login, followers_url, repos_url} = response.data\n                const followers = axios(`${followers_url}?per_page=100`)\n\n                const repos = axios(`${repos_url}?per_page=100`)\n\n                await Promise.allSettled([followers, repos]).then((resluts)=>{\n                    const [followers, repos] = resluts\n                    if  (followers.status === 'fulfilled'){\n                        setGithubFollowers(followers.value.data)\n                    }\n                    if  (repos.status === 'fulfilled'){\n                        setGithubRepos(repos.value.data)\n                    }\n                    setIsloading(false)\n                })\n            }else{\n                setIsloading(false)\n                toggleError(true, \"sorry, there is no user with that username!\")\n            }\n            checkRequests()\n        // })\n     }\n\n    useEffect(()=>{\n        checkRequests()\n    },[])\n    \n    return(\n        <GithubContext.Provider value={\n            {\n                githubUser:githubUser,\n                githubRepos:githubRepos,\n                githubFollowers:githubFollowers,\n                requests:requests,\n                isLoading:isLoading, \n                error:error,\n                serachGithunUsers:serachGithunUsers\n            }\n            }>\n            {children}\n        </GithubContext.Provider>\n    );\n}\n\nexport {GithubProvider, GithubContext};"]},"metadata":{},"sourceType":"module"}