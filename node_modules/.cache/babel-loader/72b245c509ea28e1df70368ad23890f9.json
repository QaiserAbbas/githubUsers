{"ast":null,"code":"var _jsxFileName = \"/Users/qaiserabbas/React/githubUsers/src/context/context.js\";\nimport React, { useState, useEffect } from 'react';\nimport mockUser from './mockData.js/mockUser';\nimport mockRepos from './mockData.js/mockRepos';\nimport mockFollowers from './mockData.js/mockFollowers';\nimport axios from 'axios';\nconst rootUrl = 'https://api.github.com';\nconst GithubContext = React.createContext();\n\nconst GithubProvider = ({\n  children\n}) => {\n  const [githubUser, setGithubUser] = useState(mockUser);\n  const [githubRepos, setGithubRepos] = useState(mockRepos);\n  const [githubFollowers, setGithubFollowers] = useState(mockFollowers);\n  const [requests, setRequests] = useState(0);\n  const [isLoading, setIsloading] = useState(false);\n  const [error, setError] = useState({\n    show: false,\n    msg: \"\"\n  });\n\n  const checkRequests = () => {\n    axios(`${rootUrl}/rate_limit`).then(({\n      data\n    }) => {\n      let {\n        rate: {\n          remaining\n        }\n      } = data;\n      setRequests(remaining);\n\n      if (remaining === 0) {\n        toggleError(true, \"sorry, you have exceeded your hourly rate limit!\");\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n\n  function toggleError(show = false, msg = \"\") {\n    setError({\n      show: show,\n      msg: msg\n    });\n  }\n\n  useEffect(() => {\n    checkRequests();\n  }, []);\n  return /*#__PURE__*/React.createElement(GithubContext.Provider, {\n    value: {\n      githubUser: githubUser,\n      githubRepos: githubRepos,\n      githubFollowers: githubFollowers,\n      requests: requests,\n      isLoading: isLoading,\n      error: error\n    }\n  }, children);\n};\n\nexport { GithubProvider, GithubContext };","map":{"version":3,"sources":["/Users/qaiserabbas/React/githubUsers/src/context/context.js"],"names":["React","useState","useEffect","mockUser","mockRepos","mockFollowers","axios","rootUrl","GithubContext","createContext","GithubProvider","children","githubUser","setGithubUser","githubRepos","setGithubRepos","githubFollowers","setGithubFollowers","requests","setRequests","isLoading","setIsloading","error","setError","show","msg","checkRequests","then","data","rate","remaining","toggleError","catch","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,OAAO,GAAG,wBAAhB;AAEA,MAAMC,aAAa,GAAGR,KAAK,CAACS,aAAN,EAAtB;;AAEA,MAAMC,cAAc,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAe;AAClC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAACE,QAAD,CAA5C;AACA,QAAM,CAACW,WAAD,EAAcC,cAAd,IAAgCd,QAAQ,CAACG,SAAD,CAA9C;AACA,QAAM,CAACY,eAAD,EAAkBC,kBAAlB,IAAwChB,QAAQ,CAACI,aAAD,CAAtD;AAEA,QAAM,CAACa,QAAD,EAAWC,WAAX,IAA0BlB,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACmB,SAAD,EAAYC,YAAZ,IAA4BpB,QAAQ,CAAC,KAAD,CAA1C;AAEA,QAAM,CAACqB,KAAD,EAAQC,QAAR,IAAoBtB,QAAQ,CAAC;AAACuB,IAAAA,IAAI,EAAC,KAAN;AAAaC,IAAAA,GAAG,EAAC;AAAjB,GAAD,CAAlC;;AACA,QAAMC,aAAa,GAAG,MAAK;AACvBpB,IAAAA,KAAK,CAAE,GAAEC,OAAQ,aAAZ,CAAL,CAA+BoB,IAA/B,CAAoC,CAAC;AAACC,MAAAA;AAAD,KAAD,KAAU;AAC1C,UAAI;AACAC,QAAAA,IAAI,EAAE;AAACC,UAAAA;AAAD;AADN,UAEAF,IAFJ;AAGAT,MAAAA,WAAW,CAACW,SAAD,CAAX;;AACA,UAAIA,SAAS,KAAK,CAAlB,EAAqB;AACjBC,QAAAA,WAAW,CAAC,IAAD,EAAO,kDAAP,CAAX;AACH;AACJ,KARD,EAQGC,KARH,CAQUV,KAAD,IAAS;AACdW,MAAAA,OAAO,CAACC,GAAR,CAAYZ,KAAZ;AACH,KAVD;AAWH,GAZD;;AAaA,WAASS,WAAT,CAAqBP,IAAI,GAAG,KAA5B,EAAkCC,GAAG,GAAG,EAAxC,EAA2C;AACvCF,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAACA,IAAN;AAAYC,MAAAA,GAAG,EAACA;AAAhB,KAAD,CAAR;AACH;;AACDvB,EAAAA,SAAS,CAAC,MAAI;AACVwB,IAAAA,aAAa;AAChB,GAFQ,EAEP,EAFO,CAAT;AAIA,sBACI,oBAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EACzB;AACId,MAAAA,UAAU,EAACA,UADf;AAEIE,MAAAA,WAAW,EAACA,WAFhB;AAGIE,MAAAA,eAAe,EAACA,eAHpB;AAIIE,MAAAA,QAAQ,EAACA,QAJb;AAKIE,MAAAA,SAAS,EAACA,SALd;AAMIE,MAAAA,KAAK,EAACA;AANV;AADJ,KAUKX,QAVL,CADJ;AAcH,CA3CD;;AA6CA,SAAQD,cAAR,EAAwBF,aAAxB","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport mockUser from './mockData.js/mockUser';\nimport mockRepos from './mockData.js/mockRepos';\nimport mockFollowers from './mockData.js/mockFollowers';\nimport axios from 'axios';\n\nconst rootUrl = 'https://api.github.com';\n\nconst GithubContext = React.createContext();\n\nconst GithubProvider = ({children}) =>{\n    const [githubUser, setGithubUser] = useState(mockUser)\n    const [githubRepos, setGithubRepos] = useState(mockRepos)\n    const [githubFollowers, setGithubFollowers] = useState(mockFollowers)\n\n    const [requests, setRequests] = useState(0)\n    const [isLoading, setIsloading] = useState(false)\n\n    const [error, setError] = useState({show:false, msg:\"\"})\n    const checkRequests = () =>{\n        axios(`${rootUrl}/rate_limit`).then(({data})=>{\n            let {\n                rate: {remaining},\n            } = data\n            setRequests(remaining)\n            if (remaining === 0 ){\n                toggleError(true, \"sorry, you have exceeded your hourly rate limit!\")\n            }\n        }).catch((error)=>{\n            console.log(error)\n        })\n    }\n    function toggleError(show = false,msg = \"\"){\n        setError({show:show, msg:msg})\n    }\n    useEffect(()=>{\n        checkRequests()\n    },[])\n    \n    return(\n        <GithubContext.Provider value={\n            {\n                githubUser:githubUser,\n                githubRepos:githubRepos,\n                githubFollowers:githubFollowers,\n                requests:requests,\n                isLoading:isLoading, \n                error:error\n            }\n            }>\n            {children}\n        </GithubContext.Provider>\n    );\n}\n\nexport {GithubProvider, GithubContext};"]},"metadata":{},"sourceType":"module"}